generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              BigInt        @id(map: "pk_users")
  nickname        String        @db.VarChar(20)
  email           String        @db.VarChar(255)
  password        String        @db.VarChar(255)
  loginType       LoginTypeEnum @map("login_type")
  role            UserRoleEnum  @default(USER)
  isEmailVerified Boolean       @default(false) @map("is_email_verified") @db.Boolean
  mbti            MbtiEnum?
  createdAt       DateTime      @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt       DateTime      @default(now()) @map("updated_at") @db.Timestamptz(6)
  deletedAt       DateTime?     @map("deleted_at") @db.Timestamptz(6)

  posts               Post[]
  userVerifyTokens    UserVerifyToken[]
  requestedConnection UserConnection?   @relation("RequestedConnection")
  requesterConnection UserConnection?   @relation("RequesterConnection")

  @@unique([email, loginType], name: "uq_user_email_login_type")
  @@map("users")
}

model UserVerifyToken {
  id        BigInt                  @id(map: "pk_user_verify_tokens")
  userId    BigInt                  @map("user_id") @db.BigInt()
  type      UserVerifyTokenTypeEnum
  isUsed    Boolean                 @default(false) @map("is_used") @db.Boolean
  token     String                  @unique(map: "uq_user_verify_tokens_token") @db.Uuid
  createdAt DateTime                @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime                @default(now()) @map("updated_at") @db.Timestamptz(6)
  expiresAt DateTime                @map("expires_at") @db.Timestamptz(6)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, type], name: "uq_user_verify_tokens_user_id_type")
  @@map("user_verify_tokens")
}

model UserConnection {
  id          BigInt                   @id(map: "pk_user_connections")
  // 피요청자
  requestedId BigInt                   @unique(map: "uq_user_connections_requested_id") @map("requested_id") @db.BigInt()
  // 요청자
  requesterId BigInt                   @unique(map: "uq_user_connections_requester_id") @map("requester_id") @db.BigInt()
  status      UserConnectionStatusEnum @default(PENDING)
  createdAt   DateTime                 @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt   DateTime                 @default(now()) @map("updated_at") @db.Timestamptz(6)
  deletedAt   DateTime?                @map("deleted_at") @db.Timestamptz(6)

  requestedUser User @relation("RequestedConnection", fields: [requestedId], references: [id], onDelete: Cascade)
  requesterUser User @relation("RequesterConnection", fields: [requesterId], references: [id], onDelete: Cascade)

  @@map("user_connections")
}

model Post {
  id        BigInt    @id(map: "pk_posts")
  userId    BigInt    @map("user_id") @db.BigInt()
  title     String    @db.VarChar(255)
  body      String    @db.Text
  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime  @default(now()) @map("updated_at") @db.Timestamptz(6)
  deletedAt DateTime? @map("deleted_at") @db.Timestamptz(6)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("posts")
}

enum UserRoleEnum {
  USER
  ADMIN
}

enum LoginTypeEnum {
  EMAIL
}

enum MbtiEnum {
  ISTJ
  ISFJ
  INFJ
  INTJ
  ISTP
  ISFP
  INFP
  INTP
  ESTP
  ESFP
  ENFP
  ENTP
  ESTJ
  ESFJ
  ENFJ
  ENTJ
}

enum UserVerifyTokenTypeEnum {
  EMAIL
  PASSWORD_CHANGE
}

enum UserConnectionStatusEnum {
  PENDING
  ACCEPTED
  REJECTED
  DISCONNECTED
  CANCELED
}
