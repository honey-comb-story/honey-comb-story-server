generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              BigInt        @id(map: "pk_users")
  name            String        @db.VarChar(20)
  nickname        String        @db.VarChar(20)
  email           String        @db.VarChar(255)
  password        String        @db.VarChar(255)
  loginType       LoginTypeEnum @map("login_type")
  role            UserRoleEnum  @default(user)
  isEmailVerified Boolean       @default(false) @map("is_email_verified") @db.Boolean
  mbti            MbtiEnum?
  createdAt       DateTime      @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt       DateTime      @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  deletedAt       DateTime?     @map("deleted_at") @db.Timestamptz(6)

  posts                Post[]
  userEmailVerifyToken UserEmailVerifyToken?

  @@unique([email, loginType], name: "uq_user_email_login_type")
  @@map("users")
}

model UserEmailVerifyToken {
  id        BigInt   @id(map: "pk_user_email_verify_tokens")
  userId    BigInt   @unique(map: "uq_user_email_verify_tokens_user_id") @map("user_id") @db.BigInt()
  token     String   @unique(map: "uq_user_email_verify_tokens_token") @db.Uuid
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  expiresAt DateTime @map("expires_at") @db.Timestamptz(6)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_email_verify_tokens")
}

model Post {
  id        BigInt    @id(map: "pk_posts")
  userId    BigInt    @map("user_id") @db.BigInt()
  title     String    @db.VarChar(255)
  body      String    @db.Text
  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  deletedAt DateTime? @map("deleted_at") @db.Timestamptz(6)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("posts")
}

enum UserRoleEnum {
  user
  admin
}

enum LoginTypeEnum {
  email
}

enum MbtiEnum {
  ISTJ
  ISFJ
  INFJ
  INTJ
  ISTP
  ISFP
  INFP
  INTP
  ESTP
  ESFP
  ENFP
  ENTP
  ESTJ
  ESFJ
  ENFJ
  ENTJ
}
